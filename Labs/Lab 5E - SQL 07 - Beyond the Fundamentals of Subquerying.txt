
--Ex 1) Write a query against the dbo.Orders table that computes both a rank and a dense rank for each customer order, partitioned by custid and ordered by qty.

--(dosent't run)
--SELECT custid, orderid, qty,
--RANK() OVER(PARTITION BY custid ORDER BY qty) AS rnk,
--DENSE_RANK() OVER(PARTITION BY custid ORDER BY qty) AS drnk
--FROM dbo.Orders;

--Ex 2) Can you think of an alternative way to achieve the same task?

--WITH C AS
--(
--SELECT DISTINCT val
--FROM Sales.OrderValues
--) 
--SELECT val, ROW_NUMBER() OVER(ORDER BY val) AS rownum
--FROM C;

--Ex 3) Write a query against the dbo.Orders table that computes for each customer order both the difference between the current order quantity and the
--      customer’s previous order quantity and the difference between the current order quantity and the customer’s next order quantity:

--(dosen't run)
--SELECT o.custid, o.orderid, o.qty,
--qty - LAG(qty) OVER(PARTITION BY o.custid
--					ORDER BY o.orderdate, o.orderid) AS diffprev,
--qty - LEAD(qty) OVER(PARTITION BY o.custid
--					ORDER BY o.orderdate, o.orderid) AS diffnext
--FROM dbo	.Orders o;

--Ex 4) Write a query against the dbo.Orders table that returns a row for each employee, a column for each order year, and the count of orders for each
--      employee and order year:

--without pivot (dosen't run) had to change to sales.orders

--USE TSQLV4;
--SELECT empid,
--COUNT(CASE WHEN orderyear = 2014 THEN orderyear END) AS cnt2014,
--COUNT(CASE WHEN orderyear = 2015 THEN orderyear END) AS cnt2015,
--COUNT(CASE WHEN orderyear = 2016 THEN orderyear END) AS cnt2016
--FROM (SELECT empid, YEAR(orderdate) AS orderyear
--FROM Sales.Orders) AS D
--GROUP BY empid;

--With pivot (dosent' run) had to change to sales.orders

--SELECT empid, [2014] AS cnt2014, [2015] AS cnt2015, [2016] AS cnt2016
--FROM (SELECT empid, YEAR(orderdate) AS orderyear
--FROM sales.Orders) AS D
--PIVOT(COUNT(orderyear)
--FOR orderyear IN([2014], [2015], [2016])) AS P;

--Ex 5) Run the following code to create and populate the EmpYearOrders table:

--without pivot (dosen't run)
--FROM dbo.EmpYearOrders
--CROSS APPLY (VALUES(2014, cnt2014),
--(2015, cnt2015),
--(2016, cnt2016)) AS A(orderyear, numorders)
--WHERE numorders <> 0;

--this code dosen't run either
--SELECT empid, CAST(RIGHT(orderyear, 4) AS INT) AS orderyear, numorders
--FROM dbo.EmpYearOrders
--UNPIVOT(numorders FOR orderyear IN(cnt2014, cnt2015, cnt2016)) AS U
--WHERE numorders <> 0;

--Ex 6) Write a query against the dbo.Orders table that returns the total quantities for each of the following: (employee, customer, and order year),
--      (employee and order year), and (customer and order year). Include a result column in the output that uniquely identifies the grouping set with which
--      the current row is associated:

--This code doesn't run either.
--SELECT
--GROUPING_ID(empid, custid, YEAR(Orderdate)) AS groupingset,
--empid, custid, YEAR(Orderdate) AS orderyear, SUM(qty) AS sumqty
--FROM dbo.Orders
--GROUP BY
--GROUPING SETS
--(
--(empid, custid, YEAR(orderdate)),
--(empid, YEAR(orderdate)),
--(custid, YEAR(orderdate))
--);